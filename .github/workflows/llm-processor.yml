name: Gemini Bulk File Processor

on:
  workflow_dispatch:
    inputs:
      input_file:
        description: '–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏'
        required: true
        type: string
        default: 'data/facts27.txt'
      
      prompt:
        description: '–ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'
        required: true
        type: string
        default: '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∏ –≤—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã'
      
      output_filename:
        description: '–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)'
        required: true
        type: string
        default: 'processed_facts'
      
      model:
        description: '–ú–æ–¥–µ–ª—å Gemini API'
        required: false
        type: choice
        options:
          - 'gemini-2.0-flash'
          - 'gemini-2.0-flash-lite'
          - 'gemini-2.5-flash'
          - 'gemini-2.5-flash-lite'
          - 'gemini-2.5-pro'
          - 'gemini-1.5-flash'
          - 'gemini-1.5-pro'
        default: 'gemini-2.0-flash'
      
      chunk_size:
        description: '–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (–º–∏–Ω. 12000 –¥–ª—è —á–∞–Ω–∫–æ–≤ –ø–æ 10000)'
        required: false
        type: choice
        options:
          - '15000'
          - '25000'
          - '50000'
          - '100000'
          - '200000'
          - '500000'
          - '1000000'
          - '1500000'
          - '2000000'
        default: '50000'
      
      delay_between_chunks:
        description: '–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö'
        required: false
        type: choice
        options:
          - '0'
          - '1'
          - '2'
          - '5'
          - '10'
          - '15'
        default: '0'
      
      concurrent_requests:
        description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤'
        required: false
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '5'
          - '8'
          - '10'
          - '15'
          - '20'
        default: '10'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      file-exists: ${{ steps.check.outputs.exists }}
      estimated-time: ${{ steps.estimate.outputs.time }}
      file-size: ${{ steps.check.outputs.file_size }}
      estimated-chunks: ${{ steps.check.outputs.estimated_chunks }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check if input file exists
      id: check
      run: |
        if [ -f "${{ github.event.inputs.input_file }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${{ github.event.inputs.input_file }}"
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
          file_size=$(wc -c < "${{ github.event.inputs.input_file }}")
          echo "file_size=$file_size" >> $GITHUB_OUTPUT
          
          # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
          file_size_kb=$((file_size / 1024))
          file_size_mb=$((file_size_kb / 1024))
          
          echo "üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file_size_kb}KB (${file_size_mb}MB)"
          
          # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (1 —Ç–æ–∫–µ–Ω ‚âà 4 —Å–∏–º–≤–æ–ª–∞)
          estimated_tokens=$((file_size / 4))
          chunk_size=${{ github.event.inputs.chunk_size }}
          
          # –£—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 10,000 —Ç–æ–∫–µ–Ω–æ–≤
          min_chunk_size=10000
          effective_chunk_size=$((chunk_size > min_chunk_size ? chunk_size : min_chunk_size))
          estimated_chunks=$((estimated_tokens / effective_chunk_size + 1))
          
          echo "estimated_chunks=$estimated_chunks" >> $GITHUB_OUTPUT
          
          echo "üî¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: $estimated_tokens"
          echo "üì¶ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: $estimated_chunks (–º–∏–Ω. —Ä–∞–∑–º–µ—Ä: 10,000 —Ç–æ–∫–µ–Ω–æ–≤)"
          
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${{ github.event.inputs.input_file }}"
          exit 1
        fi
    
    - name: Estimate processing time for parallel processing
      id: estimate
      if: steps.check.outputs.exists == 'true'
      run: |
        estimated_chunks=${{ steps.check.outputs.estimated_chunks }}
        delay=${{ github.event.inputs.delay_between_chunks }}
        concurrent=${{ github.event.inputs.concurrent_requests }}
        
        # –í—Ä–µ–º—è –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å –ø–æ–ª–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–µ–π
        processing_time_per_chunk=8
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏–∏
        total_processing_time=$((estimated_chunks * processing_time_per_chunk / concurrent))
        total_delay_time=$((estimated_chunks * delay / concurrent))
        total_time_seconds=$((total_processing_time + total_delay_time))
        estimated_minutes=$((total_time_seconds / 60))
        
        # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
        if [ $estimated_minutes -lt 1 ]; then
          estimated_minutes=1
        fi
        
        echo "time=${estimated_minutes}" >> $GITHUB_OUTPUT
        echo "‚è±Ô∏è –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${estimated_minutes} –º–∏–Ω—É—Ç"
        echo "üöÄ –ü–æ–ª–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è: $concurrent –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
        echo "üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: 10,000 —Ç–æ–∫–µ–Ω–æ–≤"
        
        if [ $estimated_minutes -gt 30 ]; then
          echo "‚ÑπÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç"
        fi

  process-file:
    name: Process File with Gemini (Fast Parallel)
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.file-exists == 'true'
    
    permissions:
      contents: write
      actions: read
    
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      PYTHONUNBUFFERED: 1
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate API key
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "‚ùå GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Secrets"
          echo "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Secrets and variables ‚Üí Actions"
          echo "–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π secret —Å –∏–º–µ–Ω–µ–º GEMINI_API_KEY"
          exit 1
        else
          echo "‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω"
        fi
    
    - name: Create output directory
      run: |
        mkdir -p outputs
        echo "üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è outputs/"
    
    - name: Show processing parameters (Fast Parallel)
      run: |
        file_size=${{ needs.validate-inputs.outputs.file-size }}
        file_size_kb=$((file_size / 1024))
        
        echo "üöÄ –ü–ê–†–ê–ú–ï–¢–†–´ –ë–´–°–¢–†–û–ô –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:"
        echo "========================================"
        echo "   üìÑ –§–∞–π–ª: ${{ github.event.inputs.input_file }}"
        echo "   üìè –†–∞–∑–º–µ—Ä: ${file_size_kb}KB"
        echo "   ü§ñ –ú–æ–¥–µ–ª—å: ${{ github.event.inputs.model }}"
        echo "   üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${{ github.event.inputs.chunk_size }} —Ç–æ–∫–µ–Ω–æ–≤"
        echo "   üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞–Ω–∫: 10,000 —Ç–æ–∫–µ–Ω–æ–≤"
        echo "   ‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: ${{ github.event.inputs.delay_between_chunks }} —Å–µ–∫—É–Ω–¥"
        echo "   üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${{ github.event.inputs.concurrent_requests }}"
        echo "   üì¶ –û–∂–∏–¥–∞–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤: ${{ needs.validate-inputs.outputs.estimated-chunks }}"
        echo "   üíæ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${{ github.event.inputs.output_filename }}.txt"
        echo "   üìù –ü—Ä–æ–º–ø—Ç: ${{ github.event.inputs.prompt }}"
        echo ""
        echo "‚ö° –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ë–´–°–¢–†–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:"
        echo "   ‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ"
        echo "   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 10,000 —Ç–æ–∫–µ–Ω–æ–≤"
        echo "   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"
    
    - name: Save prompt to file
      run: |
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∫–∞–≤—ã—á–∫–∞–º–∏
        echo '${{ github.event.inputs.prompt }}' > prompt.txt
        echo "üíæ –ü—Ä–æ–º–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏"
        echo "üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞:"
        cat prompt.txt
    
    - name: Process file with Gemini API (Fast Parallel)
      id: process
      run: |
        echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±—ã—Å—Ç—Ä—É—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        
        # –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
        PROMPT_TEXT=$(cat prompt.txt)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        set +e
        
        python main.py \
          --file "${{ github.event.inputs.input_file }}" \
          --prompt "$PROMPT_TEXT" \
          --output "outputs/${{ github.event.inputs.output_filename }}.txt" \
          --model "${{ github.event.inputs.model }}" \
          --chunk-size "${{ github.event.inputs.chunk_size }}" \
          --delay "${{ github.event.inputs.delay_between_chunks }}" \
          --concurrent "${{ github.event.inputs.concurrent_requests }}" \
          --paid-tier
        
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          echo "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
          echo "success=true" >> $GITHUB_OUTPUT
        elif [ $exit_code -eq 2 ]; then
          echo "‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ"
          echo "success=partial" >> $GITHUB_OUTPUT
        else
          echo "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $exit_code)"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check output file
      id: check_output
      run: |
        output_file="outputs/${{ github.event.inputs.output_filename }}.txt"
        
        if [ -f "$output_file" ]; then
          file_size=$(wc -c < "$output_file")
          line_count=$(wc -l < "$output_file")
          word_count=$(wc -w < "$output_file")
          
          # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
          file_size_kb=$((file_size / 1024))
          file_size_mb=$((file_size_kb / 1024))
          
          echo "üìÑ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $output_file"
          echo "üìè –†–∞–∑–º–µ—Ä: ${file_size_kb}KB (${file_size_mb}MB)"
          echo "üìù –°—Ç—Ä–æ–∫: $line_count"
          echo "üìù –°–ª–æ–≤: $word_count"
          
          echo "file_created=true" >> $GITHUB_OUTPUT
          echo "file_size=$file_size" >> $GITHUB_OUTPUT
          echo "line_count=$line_count" >> $GITHUB_OUTPUT
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          echo ""
          echo "üîç –ü–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:"
          echo "================================"
          head -15 "$output_file"
          echo ""
          echo "üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:"
          echo "=================================="
          tail -10 "$output_file"
          
        else
          echo "‚ùå –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω"
          echo "file_created=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload result as artifact
      if: steps.check_output.outputs.file_created == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.output_filename }}-${{ github.event.inputs.model }}-fast-parallel-result
        path: outputs/${{ github.event.inputs.output_filename }}.txt
        retention-days: 90
        compression-level: 0
    
    - name: Create processing summary
      if: always()
      run: |
        summary_file="outputs/processing_summary.md"
        
        input_size=${{ needs.validate-inputs.outputs.file-size }}
        input_size_kb=$((input_size / 1024))
        
        echo "# üöÄ –û—Ç—á–µ—Ç –æ –±—ã—Å—Ç—Ä–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ" > "$summary_file"
        echo "" >> "$summary_file"
        echo "## üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏" >> "$summary_file"
        echo "- **–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª**: \`${{ github.event.inputs.input_file }}\`" >> "$summary_file"
        echo "- **–†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞**: ${input_size_kb}KB" >> "$summary_file"
        echo "- **–ú–æ–¥–µ–ª—å**: \`${{ github.event.inputs.model }}\`" >> "$summary_file"
        echo "- **–†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞**: ${{ github.event.inputs.chunk_size }} —Ç–æ–∫–µ–Ω–æ–≤" >> "$summary_file"
        echo "- **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞–Ω–∫**: 10,000 —Ç–æ–∫–µ–Ω–æ–≤" >> "$summary_file"
        echo "- **–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏**: ${{ github.event.inputs.delay_between_chunks }} —Å–µ–∫—É–Ω–¥" >> "$summary_file"
        echo "- **–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤**: ${{ github.event.inputs.concurrent_requests }}" >> "$summary_file"
        echo "- **–û–∂–∏–¥–∞–µ–º—ã—Ö —á–∞–Ω–∫–æ–≤**: ${{ needs.validate-inputs.outputs.estimated-chunks }}" >> "$summary_file"
        echo "- **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**: $(date)" >> "$summary_file"
        echo "- **–†–µ–∂–∏–º**: üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞" >> "$summary_file"
        echo "" >> "$summary_file"
        echo "## üìà –†–µ–∑—É–ª—å—Ç–∞—Ç" >> "$summary_file"
        echo "- **–°—Ç–∞—Ç—É—Å**: ${{ steps.process.outputs.success || 'failed' }}" >> "$summary_file"
        echo "- **–§–∞–π–ª —Å–æ–∑–¥–∞–Ω**: ${{ steps.check_output.outputs.file_created || 'false' }}" >> "$summary_file"
        
        if [ "${{ steps.check_output.outputs.file_created }}" == "true" ]; then
          output_size=${{ steps.check_output.outputs.file_size }}
          output_size_kb=$((output_size / 1024))
          echo "- **–†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞**: ${output_size_kb}KB" >> "$summary_file"
          echo "- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫**: ${{ steps.check_output.outputs.line_count }}" >> "$summary_file"
        fi
        
        echo "" >> "$summary_file"
        echo "## üí≠ –ü—Ä–æ–º–ø—Ç" >> "$summary_file"
        echo "\`\`\`" >> "$summary_file"
        cat prompt.txt >> "$summary_file"
        echo "" >> "$summary_file"
        echo "\`\`\`" >> "$summary_file"
        
        echo "" >> "$summary_file"
        echo "## ‚ö° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏" >> "$summary_file"
        echo "- ‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ" >> "$summary_file"
        echo "- ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 10,000 —Ç–æ–∫–µ–Ω–æ–≤" >> "$summary_file"
        echo "- ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è" >> "$summary_file"
        echo "- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö" >> "$summary_file"
        echo "- ‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏" >> "$summary_file"
        
        cat "$summary_file"
    
    - name: Upload summary
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: processing-summary-fast-parallel
        path: outputs/processing_summary.md
        retention-days: 30
    
    - name: Create performance metrics
      if: steps.check_output.outputs.file_created == 'true'
      run: |
        metrics_file="outputs/performance_metrics.json"
        
        echo "{" > "$metrics_file"
        echo "  \"processing_date\": \"$(date -Iseconds)\"," >> "$metrics_file"
        echo "  \"input_file\": \"${{ github.event.inputs.input_file }}\"," >> "$metrics_file"
        echo "  \"input_size_bytes\": ${{ needs.validate-inputs.outputs.file-size }}," >> "$metrics_file"
        echo "  \"output_size_bytes\": ${{ steps.check_output.outputs.file_size }}," >> "$metrics_file"
        echo "  \"model\": \"${{ github.event.inputs.model }}\"," >> "$metrics_file"
        echo "  \"chunk_size\": ${{ github.event.inputs.chunk_size }}," >> "$metrics_file"
        echo "  \"min_chunk_size\": 10000," >> "$metrics_file"
        echo "  \"delay_seconds\": ${{ github.event.inputs.delay_between_chunks }}," >> "$metrics_file"
        echo "  \"concurrent_requests\": ${{ github.event.inputs.concurrent_requests }}," >> "$metrics_file"
        echo "  \"estimated_chunks\": ${{ needs.validate-inputs.outputs.estimated-chunks }}," >> "$metrics_file"
        echo "  \"processing_mode\": \"fast_parallel\"," >> "$metrics_file"
        echo "  \"tier\": \"paid\"," >> "$metrics_file"
        echo "  \"status\": \"${{ steps.process.outputs.success }}\"," >> "$metrics_file"
        echo "  \"estimated_processing_time_minutes\": ${{ needs.validate-inputs.outputs.estimated-time }}" >> "$metrics_file"
        echo "}" >> "$metrics_file"
        
        echo "üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
        cat "$metrics_file"
    
    - name: Upload metrics
      if: steps.check_output.outputs.file_created == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: performance-metrics-fast-parallel
        path: outputs/performance_metrics.json
        retention-days: 90
    
    - name: Upload prompt file for debugging
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-prompt-file
        path: prompt.txt
        retention-days: 7
    
    - name: Commit results to repository
      if: steps.check_output.outputs.file_created == 'true'
      continue-on-error: true
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Gemini Fast Processor Bot"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        git add outputs/
        
        if git diff --staged --quiet; then
          echo "‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
        else
          timestamp=$(date '+%Y-%m-%d %H:%M:%S')
          model="${{ github.event.inputs.model }}"
          chunk_size="${{ github.event.inputs.chunk_size }}"
          concurrent="${{ github.event.inputs.concurrent_requests }}"
          
          git commit -m "üöÄ –ë—ã—Å—Ç—Ä–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${{ github.event.inputs.output_filename }}.txt

          ‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:
          - –ú–æ–¥–µ–ª—å: $model
          - –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: $chunk_size —Ç–æ–∫–µ–Ω–æ–≤ (–º–∏–Ω. 10,000)
          - –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: ${concurrent}x –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
          - –†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
          - –í—Ä–µ–º—è: $timestamp"
          
          # –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
          if git push; then
            echo "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
          else
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞)"
          fi
        fi

  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [validate-inputs, process-file]
    if: always()
    
    steps:
    - name: Processing completion summary
      run: |
        echo "üéØ –ë–´–°–¢–†–ê–Ø –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê"
        echo "=========================================="
        
        file_size=${{ needs.validate-inputs.outputs.file-size }}
        file_size_kb=$((file_size / 1024))
        
        echo "üìÑ –§–∞–π–ª: ${{ github.event.inputs.input_file }}"
        echo "üìè –†–∞–∑–º–µ—Ä: ${file_size_kb}KB"
        echo "ü§ñ –ú–æ–¥–µ–ª—å: ${{ github.event.inputs.model }}"
        echo "üì¶ –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${{ github.event.inputs.chunk_size }} —Ç–æ–∫–µ–Ω–æ–≤"
        echo "üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —á–∞–Ω–∫: 10,000 —Ç–æ–∫–µ–Ω–æ–≤"
        echo "‚ö° –ó–∞–¥–µ—Ä–∂–∫–∞: ${{ github.event.inputs.delay_between_chunks }}—Å"
        echo "üîÑ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å: ${{ github.event.inputs.concurrent_requests }}x"
        echo "üì¶ –ß–∞–Ω–∫–æ–≤: ${{ needs.validate-inputs.outputs.estimated-chunks }}"
        echo "‚è±Ô∏è –í—Ä–µ–º—è: $(date)"
        echo ""
        
        if [ "${{ needs.process-file.result }}" == "success" ]; then
          echo "‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
          echo ""
          echo "üì• –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:"
          echo "   1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤–æ –≤–∫–ª–∞–¥–∫—É 'Actions'"
          echo "   2. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç workflow"
          echo "   3. –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã:"
          echo "      - '${{ github.event.inputs.output_filename }}-${{ github.event.inputs.model }}-fast-parallel-result' (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç)"
          echo "      - 'processing-summary-fast-parallel' (–æ—Ç—á–µ—Ç)"
          echo "      - 'performance-metrics-fast-parallel' (–º–µ—Ç—Ä–∏–∫–∏)"
        elif [ "${{ needs.process-file.result }}" == "failure" ]; then
          echo "‚ùå –°—Ç–∞—Ç—É—Å: –û—à–∏–±–∫–∞"
          echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
        else
          echo "‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: –ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
          echo "   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–∞–Ω–∫–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã"
        fi
        
        echo ""
        echo "üöÄ –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ë–´–°–¢–†–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:"
        echo "   ‚úÖ –í—Å–µ —á–∞–Ω–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"
        echo "   ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ 10,000 —Ç–æ–∫–µ–Ω–æ–≤"
        echo "   ‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        echo "   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"
        echo "   ‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API –ª–∏–º–∏—Ç–æ–≤"
