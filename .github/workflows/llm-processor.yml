# .github/workflows/gemini-bulk-processor.yml
name: Gemini Bulk File Processor

on:
  workflow_dispatch:
    inputs:
      input_file:
        description: 'Путь к входному файлу в репозитории'
        required: true
        type: string
        default: 'data/facts27.txt'
      
      prompt:
        description: 'Промпт для обработки'
        required: true
        type: string
        default: 'Проанализируй этот текст и выдели основные факты'
      
      output_filename:
        description: 'Имя выходного файла (без расширения)'
        required: true
        type: string
        default: 'processed_facts'
      
      model:
        description: 'Модель Gemini API'
        required: false
        type: choice
        options:
          - 'gemini-2.0-flash'
          - 'gemini-2.0-flash-lite'
          - 'gemini-2.5-flash'
          - 'gemini-2.5-flash-lite'
          - 'gemini-2.5-pro'
          - 'gemini-1.5-flash'
          - 'gemini-1.5-pro'
        default: 'gemini-2.0-flash'
      
      chunk_size:
        description: 'Размер чанка в токенах (для платного уровня)'
        required: false
        type: choice
        options:
          - '500000'
          - '1000000'
          - '1500000'
          - '2000000'
          - '3000000'
        default: '1000000'
      
      delay_between_chunks:
        description: 'Задержка между чанками в секундах'
        required: false
        type: choice
        options:
          - '0'
          - '5'
          - '10'
          - '15'
          - '30'
          - '60'
        default: '0'
      
      concurrent_requests:
        description: 'Количество одновременных запросов'
        required: false
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '5'
          - '10'
        default: '3'

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      file-exists: ${{ steps.check.outputs.exists }}
      estimated-time: ${{ steps.estimate.outputs.time }}
      file-size: ${{ steps.check.outputs.file_size }}
      estimated-chunks: ${{ steps.check.outputs.estimated_chunks }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check if input file exists
      id: check
      run: |
        if [ -f "${{ github.event.inputs.input_file }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "✅ Файл найден: ${{ github.event.inputs.input_file }}"
          
          # Показываем размер файла
          file_size=$(wc -c < "${{ github.event.inputs.input_file }}")
          echo "file_size=$file_size" >> $GITHUB_OUTPUT
          
          # Вычисляем размеры
          file_size_kb=$((file_size / 1024))
          file_size_mb=$((file_size_kb / 1024))
          
          echo "📁 Размер файла: ${file_size_kb}KB (${file_size_mb}MB)"
          
          # Примерная оценка токенов (1 токен ≈ 4 символа)
          estimated_tokens=$((file_size / 4))
          chunk_size=${{ github.event.inputs.chunk_size }}
          estimated_chunks=$((estimated_tokens / chunk_size + 1))
          
          echo "estimated_chunks=$estimated_chunks" >> $GITHUB_OUTPUT
          
          echo "🔢 Примерное количество токенов: $estimated_tokens"
          echo "📦 Примерное количество чанков: $estimated_chunks"
          
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "❌ Файл не найден: ${{ github.event.inputs.input_file }}"
          exit 1
        fi
    
    - name: Estimate processing time for paid tier
      id: estimate
      if: steps.check.outputs.exists == 'true'
      run: |
        estimated_chunks=${{ steps.check.outputs.estimated_chunks }}
        delay=${{ github.event.inputs.delay_between_chunks }}
        concurrent=${{ github.event.inputs.concurrent_requests }}
        
        # Время для платного уровня (быстрая обработка)
        processing_time_per_chunk=10
        
        # Используем bc для вычислений с плавающей точкой
        total_processing_time=$((estimated_chunks * processing_time_per_chunk / concurrent))
        total_delay_time=$((estimated_chunks * delay))
        total_time_seconds=$((total_processing_time + total_delay_time))
        estimated_minutes=$((total_time_seconds / 60))
        
        echo "time=${estimated_minutes}" >> $GITHUB_OUTPUT
        echo "⏱️ Примерное время обработки: ${estimated_minutes} минут"
        echo "🚀 Платный уровень: быстрая обработка с $concurrent одновременными запросами"
        
        if [ $estimated_minutes -gt 30 ]; then
          echo "ℹ️ Обработка займет более 30 минут"
        fi

  process-file:
    name: Process File with Gemini (Paid Tier)
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.file-exists == 'true'
    
    permissions:
      contents: write
      actions: read
    
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      PYTHONUNBUFFERED: 1
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate API key
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "❌ GEMINI_API_KEY не установлен в Secrets"
          echo "Перейдите в Settings → Secrets and variables → Actions"
          echo "Добавьте новый secret с именем GEMINI_API_KEY"
          exit 1
        else
          echo "✅ API ключ найден"
        fi
    
    - name: Create output directory
      run: |
        mkdir -p outputs
        echo "📁 Создана директория outputs/"
    
    - name: Show processing parameters (Paid Tier)
      run: |
        file_size=${{ needs.validate-inputs.outputs.file-size }}
        file_size_kb=$((file_size / 1024))
        
        echo "🚀 Параметры обработки (ПЛАТНЫЙ УРОВЕНЬ):"
        echo "   📄 Файл: ${{ github.event.inputs.input_file }}"
        echo "   📏 Размер: ${file_size_kb}KB"
        echo "   🤖 Модель: ${{ github.event.inputs.model }}"
        echo "   📦 Размер чанка: ${{ github.event.inputs.chunk_size }} токенов"
        echo "   ⚡ Задержка: ${{ github.event.inputs.delay_between_chunks }} секунд"
        echo "   🔄 Параллельных запросов: ${{ github.event.inputs.concurrent_requests }}"
        echo "   📦 Ожидаемых чанков: ${{ needs.validate-inputs.outputs.estimated-chunks }}"
        echo "   💾 Выходной файл: ${{ github.event.inputs.output_filename }}.txt"
        echo "   📝 Промпт: ${{ github.event.inputs.prompt }}"
        echo ""
        echo "💳 Используются лимиты платного уровня для максимальной скорости"
    
    - name: Process file with Gemini API (Paid Tier)
      id: process
      run: |
        echo "🚀 Начинаем быструю обработку файла на платном уровне..."
        
        # Устанавливаем переменные для обработки ошибок
        set +e
        
        python main.py \
          --file "${{ github.event.inputs.input_file }}" \
          --prompt "${{ github.event.inputs.prompt }}" \
          --output "outputs/${{ github.event.inputs.output_filename }}.txt" \
          --model "${{ github.event.inputs.model }}" \
          --chunk-size "${{ github.event.inputs.chunk_size }}" \
          --delay "${{ github.event.inputs.delay_between_chunks }}" \
          --concurrent "${{ github.event.inputs.concurrent_requests }}" \
          --paid-tier
        
        exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
          echo "✅ Обработка завершена успешно"
          echo "success=true" >> $GITHUB_OUTPUT
        elif [ $exit_code -eq 2 ]; then
          echo "⚠️ Обработка завершена частично"
          echo "success=partial" >> $GITHUB_OUTPUT
        else
          echo "❌ Обработка завершена с ошибками (код: $exit_code)"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check output file
      id: check_output
      run: |
        output_file="outputs/${{ github.event.inputs.output_filename }}.txt"
        
        if [ -f "$output_file" ]; then
          file_size=$(wc -c < "$output_file")
          line_count=$(wc -l < "$output_file")
          word_count=$(wc -w < "$output_file")
          
          # Вычисляем размеры
          file_size_kb=$((file_size / 1024))
          file_size_mb=$((file_size_kb / 1024))
          
          echo "📄 Создан файл: $output_file"
          echo "📏 Размер: ${file_size_kb}KB (${file_size_mb}MB)"
          echo "📝 Строк: $line_count"
          echo "📝 Слов: $word_count"
          
          echo "file_created=true" >> $GITHUB_OUTPUT
          echo "file_size=$file_size" >> $GITHUB_OUTPUT
          echo "line_count=$line_count" >> $GITHUB_OUTPUT
          
          # Показываем первые и последние строки для проверки
          echo ""
          echo "🔍 Первые 15 строк результата:"
          echo "================================"
          head -15 "$output_file"
          echo ""
          echo "🔍 Последние 10 строк результата:"
          echo "=================================="
          tail -10 "$output_file"
          
        else
          echo "❌ Выходной файл не создан"
          echo "file_created=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload result as artifact
      if: steps.check_output.outputs.file_created == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.inputs.output_filename }}-${{ github.event.inputs.model }}-paid-result
        path: outputs/${{ github.event.inputs.output_filename }}.txt
        retention-days: 90
        compression-level: 0
    
    - name: Create processing summary
      if: always()
      run: |
        summary_file="outputs/processing_summary.md"
        
        input_size=${{ needs.validate-inputs.outputs.file-size }}
        input_size_kb=$((input_size / 1024))
        
        cat > "$summary_file" << EOF
        # 🚀 Отчет об обработке файла (Платный уровень)
        
        ## 📊 Параметры обработки
        - **Входной файл**: \`${{ github.event.inputs.input_file }}\`
        - **Размер входного файла**: ${input_size_kb}KB
        - **Модель**: \`${{ github.event.inputs.model }}\`
        - **Размер чанка**: ${{ github.event.inputs.chunk_size }} токенов
        - **Задержка между запросами**: ${{ github.event.inputs.delay_between_chunks }} секунд
        - **Параллельных запросов**: ${{ github.event.inputs.concurrent_requests }}
        - **Ожидаемых чанков**: ${{ needs.validate-inputs.outputs.estimated-chunks }}
        - **Время обработки**: $(date)
        - **Уровень**: 💳 Платный (высокие лимиты)
        
        ## 📈 Результат
        - **Статус**: ${{ steps.process.outputs.success || 'failed' }}
        - **Файл создан**: ${{ steps.check_output.outputs.file_created || 'false' }}
        EOF
        
        if [ "${{ steps.check_output.outputs.file_created }}" == "true" ]; then
          output_size=${{ steps.check_output.outputs.file_size }}
          output_size_kb=$((output_size / 1024))
          echo "- **Размер результата**: ${output_size_kb}KB" >> "$summary_file"
          echo "- **Количество строк**: ${{ steps.check_output.outputs.line_count }}" >> "$summary
